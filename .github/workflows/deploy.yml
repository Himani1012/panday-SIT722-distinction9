name: Deploy to AKS

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}  # Ensure this secret is set in your GitHub repository

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Terraform Init
      - name: Terraform Init
        working-directory: ./scripts/terraform
        run: terraform init

      # Import Existing ACR Resource
      - name: Import Existing ACR
        working-directory: ./scripts/terraform
        run: |
          echo "Starting ACR import..."
          
          # Debugging: Print relevant environment variables
          echo "Subscription ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}"
          echo "Resource Group: deakinuni"
          echo "Registry Name: {registry-name}"  # Replace with the actual registry name

          # Debugging: Show the current Terraform state (if any)
          terraform state list

          # Import the existing ACR
          terraform import azurerm_container_registry.acr /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/deakinuni/providers/Microsoft.ContainerRegistry/registries/distinctionweek9
          
          echo "ACR import completed."

      # Create Terraform Plan
      - name: Terraform Plan
        working-directory: ./scripts/terraform
        run: |
          terraform plan -out=plan.tfplan \
            -var="client_id=${{ secrets.ARM_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ARM_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ARM_TENANT_ID }}" \
            -var="subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}"

      # Terraform Apply
      - name: Terraform Apply
        working-directory: ./scripts/terraform
        env:
          TF_LOG: DEBUG  # Set logging to debug for more insights
        run: |
          terraform apply -auto-approve plan.tfplan
          terraform plan -out=plan.tfplan -parallelism=10  

      # Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry
        run: echo ${{ secrets.REGISTRY_PW }} | docker login ${{ secrets.CONTAINER_REGISTRY }} -u ${{ secrets.REGISTRY_UN }} --password-stdin

      # Build Docker images for book-catalog and inventory-management services
      - name: Build book-catalog Docker image
        run: docker build -t ${{ secrets.CONTAINER_REGISTRY }}/book-catalog:latest ./book-catalog

      - name: Build inventory-management Docker image
        run: docker build -t ${{ secrets.CONTAINER_REGISTRY }}/inventory-management:latest ./inventory-management

      # Push Docker images to Azure Container Registry (ACR)
      - name: Push book-catalog Docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY }}/book-catalog:latest

      - name: Push inventory-management Docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY }}/inventory-management:latest

      # Set up Kubectl to interact with AKS
      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.2'

      # Deploy the microservices to AKS
      - name: Deploy book-catalog and inventory-management to AKS
        run: |
          kubectl apply -f ./k8s/deployment.yaml
